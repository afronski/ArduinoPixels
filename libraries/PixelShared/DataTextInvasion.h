//generated pixeldata
#ifndef _DataTextInvasion_h
#define _DataTextInvasion_h
#include "PixelData.h"
namespace _TextInvasion_ {
    const uint8_t indices[648] = {
        255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,255
        ,255
        ,255
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,255
        ,255
        ,255
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,255
        ,255
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,4
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,8
        ,8
        ,8
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,12
        ,12
        ,12
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,16
        ,16
        ,16
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,20
        ,20
        ,20
        ,20
        ,20
        ,20
        ,20
        ,20
        ,20
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,255
        ,20
        ,20
        ,20
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,24
        ,24
        ,24
        ,24
        ,24
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,24
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,255
        ,24
        ,24
        ,24
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,28
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,255
        ,28
        ,28
        ,28
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
    };
    const uint8_t color[32] = {
        220
        ,223
        ,10
        ,255
        ,221
        ,204
        ,11
        ,255
        ,221
        ,178
        ,13
        ,255
        ,222
        ,146
        ,15
        ,255
        ,223
        ,111
        ,17
        ,255
        ,223
        ,77
        ,20
        ,255
        ,224
        ,45
        ,22
        ,255
        ,225
        ,19
        ,24
        ,255
    };
}
struct DataTextInvasion : public PixelDataImpl<DataTextInvasion> {
       static constexpr uint8_t width() { return 81; }
       static constexpr uint8_t height() { return 8; }
       static constexpr const uint8_t* indices() { return _TextInvasion_::indices; }
       static constexpr const uint8_t* color() { return _TextInvasion_::color; }
       constexpr DataTextInvasion(){}
};
#endif
